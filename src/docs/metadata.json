{
  "metadata": [
    {
      "description": "Think of the box",
      "methods": [],
      "displayName": "Box",
      "props": {
        "big": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "This comment will be picked up by the docs",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "methods": [],
      "displayName": "Button",
      "props": {
        "primary": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use for primary call to action",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "transparent": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use for secondary call to action",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable button that does not validate constraint",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "loading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Loading state when waiting for an action to complete",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "success": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Successful state when action is completed successfuly",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "_type": {
          "type": {
            "name": "custom",
            "raw": "props => onlyOneOf(props, ['primary', 'transparent', 'disabled'])"
          },
          "required": false,
          "description": "@ignore This is an internal prop only used for validation"
        }
      }
    },
    {
      "description": "",
      "methods": [],
      "displayName": "Icon",
      "props": {
        "type": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "Icon type"
        },
        "size": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Icon size",
          "defaultValue": {
            "value": "14",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "methods": [],
      "displayName": "Input",
      "props": {
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Make input readOnly if it does not validate constraint",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "code": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use when the expected input is code",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "error": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Pass error string directly to show error state",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "methods": [],
      "displayName": "Logo"
    },
    {
      "description": "Use select when you want to limit the input options",
      "methods": [],
      "displayName": "Select",
      "props": {
        "options": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "shape",
              "value": {
                "text": {
                  "name": "string",
                  "required": true
                },
                "value": {
                  "name": "any",
                  "required": true
                },
                "defaultSelected": {
                  "name": "bool",
                  "required": false
                }
              }
            }
          },
          "required": true,
          "description": "Options to render inside select"
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Make input readOnly if it does not validate constraint",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "error": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Pass error string directly to show error state",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "methods": [],
      "displayName": "Spinner",
      "props": {
        "inverse": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Invert for dark background",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    },
    {
      "description": "Use Switch for boolean inputs",
      "displayName": "Switch",
      "methods": [
        {
          "name": "onToggle",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "on": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "State of the toggle",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "accessibleLabels": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "Labels to show, import for accessibility",
          "defaultValue": {
            "value": "['ENABLED', 'DISABLED']",
            "computed": false
          }
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Locked switch",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    },
    {
      "description": "",
      "methods": [],
      "displayName": "TextArea",
      "props": {
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Make input readOnly if it does not validate constraint",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "code": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use when the expected input is code",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "error": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Pass error string directly to show error state",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "resizeable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Allow resizing of the textarea",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    },
    {
      "description": "Use forms to collect information from user",
      "methods": [],
      "displayName": "Form"
    },
    {
      "description": "Think of the box",
      "methods": [],
      "displayName": "Sidebar",
      "props": {
        "big": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "This comment will be picked up by the docs",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ]
}